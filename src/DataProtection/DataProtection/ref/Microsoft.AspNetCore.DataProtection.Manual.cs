// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Runtime.CompilerServices;

// for unit testing
[assembly: InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Extensions.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")]
[assembly: InternalsVisibleTo("Microsoft.AspNetCore.DataProtection.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100f33a29044fa9d740c9b3213a93e57c84b472c84e0b8a0e1ae48e67a9f8f6de9d5f7f3d52ac23e48ac51801f1dc950abe901da34d2a9e3baadb141a17c77ef3c565dd5ee5054b91cf63bb3c6ab83f72ab3aafe93d0fc3c2348b764fafb0b1c0733de51459aeab46580384bf9d74c4e28164b7cde247f891ba07891c9d872ad2bb")]
[assembly: InternalsVisibleTo("DynamicProxyGenAssembly2, PublicKey=0024000004800000940000000602000000240000525341310004000001000100c547cac37abd99c8db225ef2f6c8a3602f3b3606cc9891605d02baa56104f4cfc0734aa39b93bf7852f7d9266654753cc297e7d2edfe0bac1cdcf9f717241550e0a7b191195b7667bb4f64bcb8e2121380fd1d9d46ad2d92d2d15605093924cceaf74c4861eff62abf69b9291ed0a340e113be11e6a7d3113e92484cf7045cc7")]

namespace Microsoft.AspNetCore.DataProtection
{
    internal static partial class Resources
    {
        internal static string AlgorithmAssert_BadBlockSize { get { throw null; } }
        internal static string AlgorithmAssert_BadDigestSize { get { throw null; } }
        internal static string AlgorithmAssert_BadKeySize { get { throw null; } }
        internal static string CertificateXmlEncryptor_CertificateNotFound { get { throw null; } }
        internal static string Common_ArgumentCannotBeNullOrEmpty { get { throw null; } }
        internal static string Common_BufferIncorrectlySized { get { throw null; } }
        internal static string Common_DecryptionFailed { get { throw null; } }
        internal static string Common_EncryptionFailed { get { throw null; } }
        internal static string Common_KeyNotFound { get { throw null; } }
        internal static string Common_KeyRevoked { get { throw null; } }
        internal static string Common_PropertyCannotBeNullOrEmpty { get { throw null; } }
        internal static string Common_PropertyMustBeNonNegative { get { throw null; } }
        internal static string Common_ValueMustBeNonNegative { get { throw null; } }
        internal static string CryptCommon_GenericError { get { throw null; } }
        internal static string CryptCommon_PayloadInvalid { get { throw null; } }
        internal static System.Globalization.CultureInfo Culture { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        internal static string EncryptedXmlDecryptor_DoesNotWorkOnCoreClr { get { throw null; } }
        internal static string FileSystem_EphemeralKeysLocationInContainer { get { throw null; } }
        internal static string KeyManagementOptions_MinNewKeyLifetimeViolated { get { throw null; } }
        internal static string KeyRingProvider_NoDefaultKey_AutoGenerateDisabled { get { throw null; } }
        internal static string LifetimeMustNotBeNegative { get { throw null; } }
        internal static string Platform_WindowsRequiredForGcm { get { throw null; } }
        internal static string ProtectionProvider_BadMagicHeader { get { throw null; } }
        internal static string ProtectionProvider_BadVersion { get { throw null; } }
        internal static System.Resources.ResourceManager ResourceManager { get { throw null; } }
        internal static string TypeExtensions_BadCast { get { throw null; } }
        internal static string XmlKeyManager_DuplicateKey { get { throw null; } }
        internal static string XmlKeyManager_IXmlRepositoryNotFound { get { throw null; } }
        internal static string FormatAlgorithmAssert_BadBlockSize(object p0) { throw null; }
        internal static string FormatAlgorithmAssert_BadDigestSize(object p0) { throw null; }
        internal static string FormatAlgorithmAssert_BadKeySize(object p0) { throw null; }
        internal static string FormatCertificateXmlEncryptor_CertificateNotFound(object p0) { throw null; }
        internal static string FormatCommon_BufferIncorrectlySized(object p0, object p1) { throw null; }
        internal static string FormatCommon_PropertyCannotBeNullOrEmpty(object p0) { throw null; }
        internal static string FormatCommon_PropertyMustBeNonNegative(object p0) { throw null; }
        internal static string FormatFileSystem_EphemeralKeysLocationInContainer(object path) { throw null; }
        internal static string FormatLifetimeMustNotBeNegative(object p0) { throw null; }
        internal static string FormatTypeExtensions_BadCast(object p0, object p1) { throw null; }
        internal static string FormatXmlKeyManager_IXmlRepositoryNotFound(object p0, object p1) { throw null; }
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]internal static string GetResourceString(string resourceKey, string defaultValue = null) { throw null; }
    }
}
namespace Microsoft.AspNetCore.DataProtection.Repositories
{
    internal partial interface IDefaultKeyStorageDirectories
    {
        System.IO.DirectoryInfo GetKeyStorageDirectory();
        System.IO.DirectoryInfo GetKeyStorageDirectoryForAzureWebSites();
    }
}
namespace Microsoft.AspNetCore.DataProtection.KeyManagement
{
    public sealed partial class XmlKeyManager : Microsoft.AspNetCore.DataProtection.KeyManagement.IKeyManager, Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.IInternalXmlKeyManager
    {
        internal XmlKeyManager(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions> keyManagementOptions, Microsoft.AspNetCore.DataProtection.Internal.IActivator activator, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.AspNetCore.DataProtection.KeyManagement.Internal.IInternalXmlKeyManager internalXmlKeyManager) { }
        internal XmlKeyManager(Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.DataProtection.KeyManagement.KeyManagementOptions> keyManagementOptions, Microsoft.AspNetCore.DataProtection.Internal.IActivator activator, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.AspNetCore.DataProtection.Repositories.IDefaultKeyStorageDirectories keyStorageDirectories) { }
    }
}